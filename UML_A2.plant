@startuml

skinparam {
    'BackgroundColor Green
    classAttributeIconSize 0
}

class WakeUp <<final>> {
    - userInput: java.util.Scanner
    - USERCONTROL: UserControl
    - ROOMCONTROL: RoomControl
    - SUBSCRCONTROL: SubscriptionControl
    + main(String[] args): void
    - mainMenu(): void
    - loggedInMenu(): void
    - credentialsPrompt(): String[]
    - createUser(): void
    - createSubscription(): void
    - logInUser(): void
    - bookActivity(): void
    - quit(): void
}
class WakeUpHelpers {
    + validateUserID (User): boolean
}
class CSVDB {
    - CSV_FILE_PATH: Path
    - writeCSVLine(String[]): void
    - writeCSVMultiLine(List<String[]>): void
    - readCSVFull(): ArrayList
    - readCSVLine(): ArrayList
}


class RoomControl <<(S, #FF7700) singleton>> {
    - selectedRoom: Room
    + getRoomActivities(): String []
    + selectRoomByActivity(String activity): boolean
    + selectRoomByRoomID(int roomID): boolean
    + fetchRoomPlacesString(): String[]
    + fetchRoomPlacesList(): List<String>
    + assignUserToRoomPlace(int userID, int placeID): void
}
class Room {
    - type: Activity
    - id: String
    + getAllPlaces(): String []
    + getBookedPlaces(): String[]
    + setBookedPlaces(int placeID): boolean
    + toString(): String
    + toArray(): String[]
}
enum Activity <<enumerate>> {
    1: SPINNING
    2: AEROBICS
    3: YOGA
}



class UserControl <<(S, #FF7700) singleton>> {
    - selectedUser: User
    - authenticatedUser: User
    + createUser(String userName, String userID): boolean
    + selectUserByUserName(String userName): boolean
    + selectUserByUserID(int userID): boolean
    + loginSelectedUser(): boolean
    + logoutSelectedUser(): boolean
    + removeSelectedUser(): boolean
    + isAuthenticatedUser(): boolean
}
class User {
    - name: String
    - id: String
    - userStatus: UserStatus
    + setActive(): void
    + setInactive(): void
    + setRemoved(): void
    + getID(): String
    + getIDAsIntArr(): int[]
    + getName(): String
    + getStatus(): String
    + toString(): String
    + toArray(): String[]
}
enum Status <<enumerate>> {
    1: ACTIVE
    2: INACTIVE
    3: REMOVED
}



class SubscriptionControl <<(S, #FF7700) singleton>> {
    - selectedSubscription: Subscription
    + calculateCost(): double
    + createSubscription(sDate, eDate, userID): boolean
    + removeSelectedSubscription(): boolean
    + selectSubscriptionByUserID(int userID): void
    + changeSelectedSubscriptionDates(sDate, eDate): boolean
}
class Subscription {
    - startDate: Date
    - endDate: Date
    - userID: String
    - subscriptionStatus: Status
    + setSDate(Date): void
    + setEDate(Date): void
    + setActive(): void
    + setInactive(): void
    + toString(): String
    + toArray(): String[]
}


'--- Notes on Diagram ---
'note right of UserControl: If the user is authenitcated\nthen authorUser is set.
note "CSVDB is used by all the singleton \nobject control classes." as Note1


'--- Relations ---
WakeUp                  -->     UserControl: <<call>>
'note on link: This could be easy to forget.
'User                    -->     Subscription: <<call>>
SubscriptionControl     *--     Subscription: <<create>>
Subscription            <--     Status: <<use>>
UserControl             *--     User: <<create>>
Status                  ->      User: <<use>>
RoomControl             <--     WakeUp: <<call>>
Room                    -*      RoomControl
'WakeUp                  ->      AuthControl: <<call>>
Activity                -->     Room: <<use>>
WakeUp                  ->      WakeUpHelpers: <<call>>
SubscriptionControl     <-      WakeUp: <<call>>

@enduml







Flow - new user:
1) A user starts the application and selects registerUser from mainMenu.
2) The user is prompted for a userName and then a userID.
3) The userID is then checked for validity.
4) A new User is created and the selectedUser is set in UserControl.
5) The new user is prompted for number of months of subscription.
6) A new subscription is created with the date as and from now() and the usersID.
7) SubscriptionControl has the selectedSubscription variable populated.
8) The cost is calculated and displayed to user. If the selectedUser is not Active
    then a membership fee is added to the total.
9) If the user accepts the price then the Subscription and the User are set to Active


Flow - Login
1) A user starts the application and selects loginUser.
2) The user is prompted for a name and then a userID.
3) If these are found in the system then the user is authenticated.
4) The menu changes to the loggedInMenu.


Flow - Book Activity
1) Same flow as for Login and then:
2) The user selects bookActivity from the loggedInMenu.
3) A check is done that the user has a valid subscription and
    that the membership is still in date.
3) If checks pass then program fetches a list of available activities.
4) The user selects an activity from the list.
5) The program fetches a list of available spaces in the room for that activity.
6) Then the user selects a space and the program checks that it is a vailable,
    and that the user is not already booked.
7) Once the user has found an available place then the room is updated with the userID to that place
8) Room saved to database and user is given a confirmation message.
9) Program returns to main menu.





--- CnP_dump ---
Det finns 3 olika typer av aktiviteter (Spinning, Aerobics, och Yoga) och varje aktivitet har totalt 9 platser fördelat
på 3 rader i salen (rad 1-3, plats a, b, c).

hide Användare
show Användare

Class01 "1" *-- "many" Class02 : contains

Class03 o-- Class04 : aggregation

Class05 --> "1" Class06

Usually, a spotted character (C, I, E or A) is used for classes, interface, enum and abstract classes
class System << (S,# FF7700) Singleton >>
Modelling considerations
There are no abstract classes
note top of WakeUp: important: remember to!
note right of RoomControl:
