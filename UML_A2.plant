@startuml
testdot
@enduml

@startuml

' Modelling considerations
' There are no abstract classes
'

skinparam classAttributeIconSize 0
skinparam class {
    'BackgroundColor Green
}


class Main <<final>> {
    - main (String[] args): void
    + registerUser (): void
    + logInUser (): void
    + bookActivity (): void
    + {static} quit (): void
}

'note top of Main: Halleluja\nGogo!

class RoomControl <<(S, #FF7700) singleton>> {
    - selectedRoom: Room
    + getRoomTypes (): String []
    + selectRoom (Activity): void
    + getRoomPlaces (): String[]
    + addUserToRoom (): boolean
}
'note right of RoomControl:
class Room {
    - roomType: Activity
    - roomId: int
    + getAllSeats(): String []
    + getBookedSeats(): String[]
    + setBookedSeat(id): void
}
enum Activity <<enumerate>> {
    1: SPINNING
    2: AEROBICS
    3: YOGA
}



class UserControl <<(S, #FF7700) singleton>> {
    - selectedUser: User
    - authenticatedUser: boolean
    + addUser (String name, String uid): boolean
    + removeUser(): void
    + findUserByName (name): User
    + findUserByUID (uid): User
    + addSubscriptionToUser (sDate, eDate)
    + loginUser (): boolean
}
class User {
    - name: String
    - uId: int
    + toString(): String
    + setActive(): boolean
    + setInactive(): boolean
    + getActiveSubscription(): Subscription
    + setActiveSubscription(): boolean
}


class AuthControl <<(S, #FF7700) singleton>> {
    + validateUid(User): boolean
    + authenticateUser(User): boolean
}


'class SubscrControl <<(S, #FF7700) singleton>> {
''    - startDate: Date
''    - endDate: Date
''}
class Subscription {
    - startDate
    - endDate
    - userId
    + setSDate(Date)
    + setEDate(Date)
    + calculateCost (): double
}

enum UserStatus <<enumerate>> {
    1: ACTIVE
    2: INACTIVE
    3: REMOVED
}


'--- Relations ---
Main             -->              UserControl: <<call>>
'note on link: This could be easy to forget.
'User            -->              Subscription: <<call>>
'Subscription    <--             SubscrControl: <<create>>
UserControl     *--              User: <<create>>
UserStatus      -->              User: <<use>>
RoomControl     <--              Main: <<call>>
Room            -*               RoomControl
'Main            ->              AuthControl: <<call>>
Activity        ->               Room: <<use>>
AuthControl     <-               UserControl: <<call>>
Subscription    -*               Main: <<create>>


/'
Det finns 3 olika typer av aktiviteter (Spinning, Aerobics, och Yoga) och varje aktivitet har totalt 9 platser fördelat
på 3 rader i salen (rad 1-3, plats a, b, c).

' hide Användare
' show Användare

Class01 "1" *-- "many" Class02 : contains

Class03 o-- Class04 : aggregation

Class05 --> "1" Class06

Usually, a spotted character (C, I, E or A) is used for classes, interface, enum and abstract classes
class System << (S,# FF7700) Singleton >>

'/
@enduml
