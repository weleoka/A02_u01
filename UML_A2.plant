@startuml

skinparam classAttributeIconSize 0
skinparam class {
    'BackgroundColor Green
}

class WakeUp <<final>> {
    - userInput: java.util.Scanner
    + main (String[] args): void
    - mainMenu (): void
    - loggedInMenu (): void
    - registerUser (): void
    - logInUser (): void
    - bookActivity (): void
    - quit (): void
}
class WakeUpHelpers {
    + validateUserID (User): boolean
}
class DbItem {
    - dbInstance (): DB
    - fetch (): self
}



class RoomControl <<(S, #FF7700) singleton>> {
    - selectedRoom: Room
    + getRoomActivities (): String []
    + fetchRoomByActivity (String): void
    + fetchRoomByRoomID (int): void
    + fetchRoomPlaces (): String[]
    + assignUserToRoomPlace (userID, placeID): void
}
class Room <extends DbItem>{
    - roomType: Activity
    - roomID: int
    + getAllSeats (): String []
    + getBookedSeats (): String[]
    + setBookedSeat (id): boolean
    + toString (): String
}
enum Activity <<enumerate>> {
    1: SPINNING
    2: AEROBICS
    3: YOGA
}



class UserControl <<(S, #FF7700) singleton>> {
    - selectedUser: User
    + createUser (String name, String uid): boolean
    + removeSelectedUser (): void
    + fetchUserByUserName (name): User
    + fetchUserByUserID (uid): User
    + loginSelectedUser (): boolean
    + logoutSelectedUser(): boolean
}
class User <extends DbItem> {
    - name: String
    - userID: int
    - userStatus: UserStatus
    + toString (): String
    + setActive (): boolean
    + setInactive (): boolean
}
enum UserStatus <<enumerate>> {
    1: ACTIVE
    2: INACTIVE
    3: REMOVED
}



class SubscriptionControl <<(S, #FF7700) singleton>> {
    - selectedSubscription: Subscription
    + calculateCost (int): double
    + createSubscription (sDate, eDate, userID): boolean
    + removeSelectedSubscription (): boolean
    + fetchSubscriptionByUserID (int): Subscription
    + changeSubscriptionDates(sDate, eDate): boolean
}
class Subscription <extends DbItem> {
    - startDate: Date
    - endDate: Date
    - userID: int
    + setSDate (Date)
    + setEDate (Date)
    + calculateCost (): double
}



'--- Notes on Diagram ---
note right of UserControl: If the user is authenitcated\nthen selectedUser is set.
note "Currently UserID is an INT for development,\nbut will be a String in later implementation." as N1


'--- Relations ---
WakeUp                  -->     UserControl: <<call>>
'note on link: This could be easy to forget.
'User                    -->     Subscription: <<call>>
SubscriptionControl     *--     Subscription: <<create>>
UserControl             *--     User: <<create>>
UserStatus              ->      User: <<use>>
RoomControl             <--     WakeUp: <<call>>
Room                    -*      RoomControl
'WakeUp                  ->      AuthControl: <<call>>
Activity                -->     Room: <<use>>
WakeUp                  ->      WakeUpHelpers: <<call>>
SubscriptionControl     <-      WakeUp: <<call>>

@enduml



Document Notes
Det finns 3 olika typer av aktiviteter (Spinning, Aerobics, och Yoga) och varje aktivitet har totalt 9 platser fördelat
på 3 rader i salen (rad 1-3, plats a, b, c).

hide Användare
show Användare

Class01 "1" *-- "many" Class02 : contains

Class03 o-- Class04 : aggregation

Class05 --> "1" Class06

Usually, a spotted character (C, I, E or A) is used for classes, interface, enum and abstract classes
class System << (S,# FF7700) Singleton >>
Modelling considerations
There are no abstract classes
note top of WakeUp: important: remember to!
note right of RoomControl:


