@startuml

skinparam classAttributeIconSize 0
skinparam class {
    'BackgroundColor Green
}

class WakeUp <<final>> {
    - userInput: java.util.Scanner
    + main (String[] args): void
    - mainMenu (): void
    - loggedInMenu (): void
    - registerUser (): void
    - logInUser (): void
    - bookActivity (): void
    - quit (): void
}
class WakeUpHelpers {
    + validateUserID (User): boolean
}
class DbItem {
    - dbInstance (): DB
    - fetch (): self
}



class RoomControl <<(S, #FF7700) singleton>> {
    - selectedRoom: Room
    + getRoomActivities (): String []
    + fetchRoomByActivity (String activity): void
    + fetchRoomByRoomID (int roomID): void
    + fetchRoomPlaces (): String[]
    + assignUserToRoomPlace (int userID, int placeID): void
}
class Room <extends DbItem>{
    - roomType: Activity
    - roomID: int
    + getAllPlaces (): String []
    + getBookedPlaces (): String[]
    + setBookedPlaces (int placeID): boolean
    + toString (): String
}
enum Activity <<enumerate>> {
    1: SPINNING
    2: AEROBICS
    3: YOGA
}



class UserControl <<(S, #FF7700) singleton>> {
    - selectedUser: User
    + createUser (String userName, String userID): boolean
    + removeSelectedUser (): void
    + fetchUserByUserName (String userName): User
    + fetchUserByUserID (int userID): User
    + loginSelectedUser (): boolean
    + logoutSelectedUser(): boolean
}
class User <extends DbItem> {
    - userName: String
    - userID: int
    - userStatus: UserStatus
    + toString (): String
    + setActive (): boolean
    + setInactive (): boolean
}
enum Status <<enumerate>> {
    1: ACTIVE
    2: INACTIVE
    3: REMOVED
}



class SubscriptionControl <<(S, #FF7700) singleton>> {
    - selectedSubscription: Subscription
    + calculateCost (): double
    + createSubscription (sDate, eDate, userID): boolean
    + removeSelectedSubscription (): boolean
    + fetchSubscriptionByUserID (int userID): Subscription
    + changeSubscriptionDates(sDate, eDate): boolean
}
class Subscription <extends DbItem> {
    - startDate: Date
    - endDate: Date
    - userID: int
    + setSDate (Date): void
    + setEDate (Date): void
    + setActive (): void
    + setInactive (): void
    + toString (): String

}


'--- Notes on Diagram ---
note right of UserControl: If the user is authenitcated\nthen selectedUser is set.
note "Currently UserID is an INT for development,\nbut will be a String in later implementation." as N1


'--- Relations ---
WakeUp                  -->     UserControl: <<call>>
'note on link: This could be easy to forget.
'User                    -->     Subscription: <<call>>
SubscriptionControl     *--     Subscription: <<create>>
Subscription            <--     Status: <<use>>
UserControl             *--     User: <<create>>
Status                  ->      User: <<use>>
RoomControl             <--     WakeUp: <<call>>
Room                    -*      RoomControl
'WakeUp                  ->      AuthControl: <<call>>
Activity                -->     Room: <<use>>
WakeUp                  ->      WakeUpHelpers: <<call>>
SubscriptionControl     <-      WakeUp: <<call>>

@enduml



Document Notes
Det finns 3 olika typer av aktiviteter (Spinning, Aerobics, och Yoga) och varje aktivitet har totalt 9 platser fördelat
på 3 rader i salen (rad 1-3, plats a, b, c).

hide Användare
show Användare

Class01 "1" *-- "many" Class02 : contains

Class03 o-- Class04 : aggregation

Class05 --> "1" Class06

Usually, a spotted character (C, I, E or A) is used for classes, interface, enum and abstract classes
class System << (S,# FF7700) Singleton >>
Modelling considerations
There are no abstract classes
note top of WakeUp: important: remember to!
note right of RoomControl:




Flow - new user:

1) A user starts the application and selects register
2) The user is prompted for a name and ID.
3) The ID is checked for validity
4) A new user is created and the selectedUser is set in USerControl
5) The new user is prompted for number of months of subscription
6) A new subscription is created with the date as and from today and th UsersID.
7) SubscriptionControl has the selectedSubscription variable populated
8) The cost is calculated and displayed to user. If the selectedUSer is not active
    then a membership fee is added to the total.
9) If the user accepts the price then the Subscription and the User is set to Active


Flow - Login

1) A user starts the application and selects login.
2) The user is promted for a name and then a userID
3) If these are found in the system then the user is authenticated
4) The menu changes to the logged in menu
5)


Flow - Book Activity
1) Same flow as for Login and then:
2) The user selects book Activity from the logged in menu.
3) A check is done that the user has a valid subscription and
    that the membership is still in date.
3) If checks pass then program fetches a list of available activities.
4) The user selects an activity from the list
5) The program fetches a list of available spaces in a room for that activity
6) Then the user selects a space and the program checks that it is a vailable, and that the user is not allready booked.
7) Once the user has foun an available space the room is updated with the userID
8) Room saved to database and user is given a confirmation promt and returns to main menu.